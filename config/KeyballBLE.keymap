#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt { tapping-term-ms = <80>; };

/ {
    combos {
        compatible = "zmk,combos";

        ShiftTab {
            bindings = <&kp LS(TAB)>;
            key-positions = <0 1>;
        };

        LLClick {
            bindings = <&mkp LCLK>;
            key-positions = <13 12>;
        };

        LRClick {
            bindings = <&mkp RCLK>;
            key-positions = <11 12>;
        };

        RRCtrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <20 21>;
        };

        RLClick {
            bindings = <&mkp LCLK>;
            key-positions = <30 31>;
        };

        RRClick {
            bindings = <&mkp RCLK>;
            key-positions = <31 32>;
        };

        RMClick {
            bindings = <&mkp MCLK>;
            key-positions = <31 30 32>;
        };

        LMClick {
            bindings = <&mkp MB3>;
            key-positions = <11 12 13>;
        };

        tab2 {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
        };

        LEscape {
            bindings = <&kp ESCAPE>;
            key-positions = <10 13>;
        };

        kickWinSwitch {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <10 38>;
        };

        kickArrow {
            bindings = <&mo 3>;
            key-positions = <11 13>;
        };

        LLCtrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <10 11>;
        };

        kickWinSwitch2 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <10 37>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        NumLayer: NumLayer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp INTERNATIONAL_5 &mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp INTERNATIONAL_5 &mo 2>;

            label = "NUMLAYER";
        };

        tempInt5: tempInt5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp INTERNATIONAL_5>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp INTERNATIONAL_5>,
                <&macro_tap>,
                <&kp INTERNATIONAL_4>;

            label = "TEMPINT5";
        };

        LCtrlTab: LCtrlTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kt RIGHT_CONTROL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>;

            label = "LCTRLTAB";
        };

        LCtrlShiftTab: LCtrlShiftTab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kt RIGHT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp RIGHT_CONTROL &kp LEFT_SHIFT>;

            label = "LCTRLSHIFTTAB";
        };

        AltCtrlRight: AltCtrlRight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp RA(RIGHT_ARROW)>,
                <&macro_wait_time 20>,
                <&kp LC(RIGHT_ARROW)>;

            label = "ALTCTRLRIGHT";
        };

        AltCtrlLeft: AltCtrlLeft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp RA(LEFT_ARROW)>,
                <&macro_wait_time 20>,
                <&kp LC(LEFT_ARROW)>;

            label = "ALTCTRLLEFT";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };

        gotoNumLayer: gotoNumLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "GOTONUMLAYER";
            bindings = <&NumLayer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <80>;
        };

        IMEkey: IMEkey {
            compatible = "zmk,behavior-tap-dance";
            label = "IMEKEY";
            #binding-cells = <0>;
            bindings = <&kp INTERNATIONAL_5>, <&kp INTERNATIONAL_4>;

            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                &kp W         &kp E         &kp R    &kp T                                                        &kp Y        &kp U  &lt 4 I    &kp O    &kp P
&kp A                &kp S         &kp D         &kp F    &kp G                  &kp LG(LS(S))      &kp RIGHT_BRACKET  &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z     &kp X         &kp C         &kp V    &kp B                  &kp B              &kp BACKSLASH      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mt RIGHT_CONTROL Z  &kp LEFT_WIN  &kp LEFT_ALT  &IMEkey  &gotoNumLayer 0 SPACE  &mo 3              &kp BACKSPACE      &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&bt BT_SEL 4  &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1    &bt BT_SEL 0                                                 &kp EQUAL        &kp CARET         &kp PLUS    &kp ASTERISK   &kp LEFT_PARENTHESIS
&trans        &kp F7         &kp F8         &kp F9          &trans         &bt BT_CLR                     &kp AT_SIGN    &kp EXCLAMATION  &kp LEFT_BRACKET  &kp HASH    &kp SEMICOLON  &kp SQT
&trans        &kp F11        &kp LC(F1)     &kp LG(ESCAPE)  &kp LG(MINUS)  &mt LS(LG(SEMI)) LG(SEMI)      &kp AMPERSAND  &kp LESS_THAN    &kp GREATER_THAN  &kp DOLLAR  &kp PERCENT    &kp QUESTION
&kp LG(X)     &kp LS(LC(O))  &kp LS(LC(M))  &trans          &trans         &trans                         &trans         &trans                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        NUM {
            bindings = <
&kp ESCAPE        &kp RC(W)  &none      &kp RC(R)  &kp RC(T)                                              &kp LS(SEMICOLON)  &kp N7        &kp N8        &kp N9        &kp LS(SQT)
&kp RC(A)         &none      &none      &kp RC(F)  &kp LC(G)  &kp LC(LA(KP_NUMBER_0))      &kp RS(MINUS)  &kp PERIOD         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&kp RC(Z)         &kp RC(X)  &kp RC(C)  &kp RC(V)  &none      &none                        &kp SQT        &kp N0             &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH
&kp LEFT_CONTROL  &trans     &trans     &trans     &trans     &trans                       &trans         &trans                                                       &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &none           &none          &none          &none                                      &trans          &kp HOME        &none         &kp END          &kp PAGE_UP
&none           &LCtrlShiftTab  &kp RC(L)      &LCtrlTab      &none   &none       &kp RC(RS(SEMICOLON))  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN
&kp LEFT_SHIFT  &AltCtrlLeft    &kp RS(RC(R))  &AltCtrlRight  &none   &none       &kp RC(MINUS)          &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
&trans          &trans          &trans         &trans         &trans  &trans      &trans                 &trans                                                         &trans
            >;

            sensor-bindings = <&inc_dec_kp RC(MINUS) RC(RS(SEMICOLON))>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
